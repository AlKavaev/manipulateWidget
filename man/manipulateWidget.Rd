% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manipulateWidget.R
\name{manipulateWidget}
\alias{manipulateWidget}
\title{Add Controls to Interactive Plots}
\usage{
manipulateWidget(.expr, ..., .main = NULL, .updateBtn = FALSE,
  .controlPos = c("left", "top", "right", "bottom", "tab"), .tabColumns = 2,
  .viewer = c("pane", "window", "browser"), .display = NULL)
}
\arguments{
\item{.expr}{expression to evaluate that returns an interactive plot of class
\code{htmlwidget}. This expression is re-evaluated each time a control is
modified.}

\item{...}{One or more named control arguments created with functions
\code{\link{mwSlider}}, \code{\link{mwText}}, etc. The name of each control
is the name of the variable the controls modifies in the expression.}

\item{.main}{Title of the shiny gadget}

\item{.updateBtn}{Should an update button be added to the controls ? If \code{TRUE}, then
the graphic is updated only when the user clicks on the update button.}

\item{.controlPos}{Where controls should be placed ? By default, they are placed in the left,
next to the graphic. If \code{controlPos = "tab"}, two tabs are created:
one containing controls and the other containing the graphic.}

\item{.tabColumns}{If controls are placed in a distinct tab, how many columns should be
used ? This parameter is used only if \code{controlPos = "tab"}}

\item{.viewer}{Controls where the gadget should be displayed. \code{"pane"} corresponds to
the Rstudio viewer, \code{"window"} to a dialog window, and \code{"browser"}
to an external web browser.}

\item{.display}{A named list of conditions that evaluate to TRUE OR FALSE indicating when
inputs should be displayed. These conditions are reevaluated each time a
control it modified. By default, each control is displayed, but if the name
of a control appears in this list, then the associated condition is
evaluated. If the result is TRUE then the control is visible, else it is
hidden.}
}
\value{
The result of the expression evaluated with the last values of the control.
It should be an object of class \code{htmlWidget}.
}
\description{
This function permits to add controls to an interactive plot created with
packages like \code{dygraphs}, \code{highcharter} or \code{plotly}in order
to change the input data or the parameters of the plot.

Technically, the function starts a shiny gadget. The R session is bloqued
until the user clicks on "cancel" or "done". If he clicks on "done", then the
the function returns the last displayed plot so the user can modify it and/or
save it.
}
\examples{
if (require(dygraphs)) {

  mydata <- data.frame(year = 2000+1:100, value = rnorm(100))
  manipulateWidget(dygraph(mydata[range[1]:range[2] - 2000, ], main = title),
                   range = mwSlider(2001, 2100, c(2001, 2100)),
                   title = mwText("Fictive time series"))

}

# Example of conditional input controls
#
# In this exemple, we plot a x series against a y series. User can choose to
# use points or lines. If he chooses lines, then an additional input is displayed
# to let him control the width of the lines.
if (require("plotly")) {

  dt <- data.frame (
    x = sort(runif(100)),
    y = rnorm(100)
  )

  myPlot <- function(type, lwd) {
    if (type == "points") {
      plot_ly(dt, x= x, y = y, mode = "markers")
    } else {
      plot_ly(dt, x= x, y = y, mode = "lines", line = list(width = lwd))
    }
  }

  manipulateWidget(
    myPlot(type, lwd),
    type = mwSelect(c("points", "lines")),
    lwd = mwSlider(1, 10, 1),
    .display = list(lwd = type == "lines")
  )

}

}

